type Auction {
  name: String!
  description: String
  startDate: Date!
  endDate: Date!
  startAmount: Float!
  featured: Boolean
  enabled: Boolean
  currentBid: AuctionCurrentBid
  countdown: Float
  bids: [AuctionCurrentBid]
  autobids: [AuctionAutobids]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type AuctionAutobids {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input AuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""A connection to a list of items."""
type AuctionConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [AuctionEdge!]!
}

type AuctionCurrentBid {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input AuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""An edge in a connection."""
type AuctionEdge {
  """The item at the end of the edge"""
  node: Auction!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type AuctionPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Auction!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input CreateManyAuctionInput {
  name: String!
  description: String
  startDate: Date!
  endDate: Date!
  startAmount: Float!
  featured: Boolean
  enabled: Boolean
  currentBid: AuctionCurrentBidInput
  countdown: Float
  bids: [AuctionCurrentBidInput]
  autobids: [AuctionAutobidsInput]
  updatedAt: Date
  createdAt: Date
}

type CreateManyAuctionPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Auction!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateManyUserInput {
  name: String!
  email: String!
  password: String!
  admin: Boolean
  blocked: Boolean
}

type CreateManyUserPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [User!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneAuctionInput {
  name: String!
  description: String
  startDate: Date!
  endDate: Date!
  startAmount: Float!
  featured: Boolean
  enabled: Boolean
  currentBid: AuctionCurrentBidInput
  countdown: Float
  bids: [AuctionCurrentBidInput]
  autobids: [AuctionAutobidsInput]
  updatedAt: Date
  createdAt: Date
}

type CreateOneAuctionPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Auction

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneUserInput {
  name: String!
  email: String!
  password: String!
  admin: Boolean
  blocked: Boolean
}

type CreateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

scalar Date

interface ErrorInterface {
  """Generic error message"""
  message: String
}

input FilterCountAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterCountAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterCountAuctionCurrentBidInput
  countdown: Float
  bids: [FilterCountAuctionCurrentBidInput]
  autobids: [FilterCountAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountAuctionOperatorsInput
  OR: [FilterCountAuctionInput!]
  AND: [FilterCountAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountAuctionOperatorsInput {
  _id: FilterCountAuction_idOperatorsInput
  createdAt: FilterCountAuctionCreatedAtOperatorsInput
}

input FilterCountUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterCountUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountUserOperatorsInput
  OR: [FilterCountUserInput!]
  AND: [FilterCountUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountUserOperatorsInput {
  email: FilterCountUserEmailOperatorsInput
  _id: FilterCountUser_idOperatorsInput
}

input FilterFindManyAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterFindManyAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterFindManyAuctionCurrentBidInput
  countdown: Float
  bids: [FilterFindManyAuctionCurrentBidInput]
  autobids: [FilterFindManyAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyAuctionOperatorsInput
  OR: [FilterFindManyAuctionInput!]
  AND: [FilterFindManyAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyAuctionOperatorsInput {
  _id: FilterFindManyAuction_idOperatorsInput
  createdAt: FilterFindManyAuctionCreatedAtOperatorsInput
}

input FilterFindManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManyUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  email: FilterFindManyUserEmailOperatorsInput
  _id: FilterFindManyUser_idOperatorsInput
}

input FilterFindOneAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindOneAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterFindOneAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindOneAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterFindOneAuctionCurrentBidInput
  countdown: Float
  bids: [FilterFindOneAuctionCurrentBidInput]
  autobids: [FilterFindOneAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneAuctionOperatorsInput
  OR: [FilterFindOneAuctionInput!]
  AND: [FilterFindOneAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneAuctionOperatorsInput {
  _id: FilterFindOneAuction_idOperatorsInput
  createdAt: FilterFindOneAuctionCreatedAtOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindOneUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  email: FilterFindOneUserEmailOperatorsInput
  _id: FilterFindOneUser_idOperatorsInput
}

input FilterRemoveManyAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterRemoveManyAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterRemoveManyAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterRemoveManyAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterRemoveManyAuctionCurrentBidInput
  countdown: Float
  bids: [FilterRemoveManyAuctionCurrentBidInput]
  autobids: [FilterRemoveManyAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyAuctionOperatorsInput
  OR: [FilterRemoveManyAuctionInput!]
  AND: [FilterRemoveManyAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyAuctionOperatorsInput {
  _id: FilterRemoveManyAuction_idOperatorsInput
  createdAt: FilterRemoveManyAuctionCreatedAtOperatorsInput
}

input FilterRemoveManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveManyUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyUserOperatorsInput
  OR: [FilterRemoveManyUserInput!]
  AND: [FilterRemoveManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyUserOperatorsInput {
  email: FilterRemoveManyUserEmailOperatorsInput
  _id: FilterRemoveManyUser_idOperatorsInput
}

input FilterRemoveOneAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterRemoveOneAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterRemoveOneAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterRemoveOneAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterRemoveOneAuctionCurrentBidInput
  countdown: Float
  bids: [FilterRemoveOneAuctionCurrentBidInput]
  autobids: [FilterRemoveOneAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneAuctionOperatorsInput
  OR: [FilterRemoveOneAuctionInput!]
  AND: [FilterRemoveOneAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneAuctionOperatorsInput {
  _id: FilterRemoveOneAuction_idOperatorsInput
  createdAt: FilterRemoveOneAuctionCreatedAtOperatorsInput
}

input FilterRemoveOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveOneUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneUserOperatorsInput
  OR: [FilterRemoveOneUserInput!]
  AND: [FilterRemoveOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneUserOperatorsInput {
  email: FilterRemoveOneUserEmailOperatorsInput
  _id: FilterRemoveOneUser_idOperatorsInput
}

input FilterUpdateManyAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateManyAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterUpdateManyAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateManyAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterUpdateManyAuctionCurrentBidInput
  countdown: Float
  bids: [FilterUpdateManyAuctionCurrentBidInput]
  autobids: [FilterUpdateManyAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyAuctionOperatorsInput
  OR: [FilterUpdateManyAuctionInput!]
  AND: [FilterUpdateManyAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyAuctionOperatorsInput {
  _id: FilterUpdateManyAuction_idOperatorsInput
  createdAt: FilterUpdateManyAuctionCreatedAtOperatorsInput
}

input FilterUpdateManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateManyUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyUserOperatorsInput
  OR: [FilterUpdateManyUserInput!]
  AND: [FilterUpdateManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyUserOperatorsInput {
  email: FilterUpdateManyUserEmailOperatorsInput
  _id: FilterUpdateManyUser_idOperatorsInput
}

input FilterUpdateOneAuction_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateOneAuctionCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

input FilterUpdateOneAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateOneAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: FilterUpdateOneAuctionCurrentBidInput
  countdown: Float
  bids: [FilterUpdateOneAuctionCurrentBidInput]
  autobids: [FilterUpdateOneAuctionAutobidsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneAuctionOperatorsInput
  OR: [FilterUpdateOneAuctionInput!]
  AND: [FilterUpdateOneAuctionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneAuctionOperatorsInput {
  _id: FilterUpdateOneAuction_idOperatorsInput
  createdAt: FilterUpdateOneAuctionCreatedAtOperatorsInput
}

input FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateOneUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  email: FilterUpdateOneUserEmailOperatorsInput
  _id: FilterUpdateOneUser_idOperatorsInput
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  userCreateMany(records: [CreateManyUserInput!]!): CreateManyUserPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  userUpdateById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  userUpdateOne(
    record: UpdateOneUserInput!

    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  """
  Update many documents without returning them: Use Query.update mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userUpdateMany(
    record: UpdateManyUserInput!

    """Filter by fields"""
    filter: FilterUpdateManyUserInput
    sort: SortUpdateManyUserInput
    skip: Int
    limit: Int = 100
  ): UpdateManyUserPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  userRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyUserInput!
    limit: Int = 100
  ): RemoveManyUserPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  auctionCreateOne(record: CreateOneAuctionInput!): CreateOneAuctionPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  auctionCreateMany(records: [CreateManyAuctionInput!]!): CreateManyAuctionPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  auctionUpdateById(_id: MongoID!, record: UpdateByIdAuctionInput!): UpdateByIdAuctionPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  auctionUpdateOne(
    record: UpdateOneAuctionInput!

    """Filter by fields"""
    filter: FilterUpdateOneAuctionInput
    sort: SortUpdateOneAuctionInput
    skip: Int
  ): UpdateOneAuctionPayload

  """
  Update many documents without returning them: Use Query.update mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  auctionUpdateMany(
    record: UpdateManyAuctionInput!

    """Filter by fields"""
    filter: FilterUpdateManyAuctionInput
    sort: SortUpdateManyAuctionInput
    skip: Int
    limit: Int = 100
  ): UpdateManyAuctionPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  auctionRemoveById(_id: MongoID!): RemoveByIdAuctionPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  auctionRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneAuctionInput
    sort: SortRemoveOneAuctionInput
  ): RemoveOneAuctionPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  auctionRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyAuctionInput!
    limit: Int = 100
  ): RemoveManyAuctionPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserInput): [User!]!
  userOne(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userMany(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyUserInput
  ): [User!]!
  userCount(
    """Filter by fields"""
    filter: FilterCountUserInput
  ): Int
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Sort argument for data ordering"""
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  userPagination(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyUserInput
    sort: SortFindManyUserInput
  ): UserPagination
  auctionById(_id: MongoID!): Auction
  auctionByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsAuctionInput): [Auction!]!
  auctionOne(
    """Filter by fields"""
    filter: FilterFindOneAuctionInput
    skip: Int
    sort: SortFindOneAuctionInput
  ): Auction
  auctionMany(
    """Filter by fields"""
    filter: FilterFindManyAuctionInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyAuctionInput
  ): [Auction!]!
  auctionCount(
    """Filter by fields"""
    filter: FilterCountAuctionInput
  ): Int
  auctionConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyAuctionInput

    """Sort argument for data ordering"""
    sort: SortConnectionAuctionEnum = _ID_DESC
  ): AuctionConnection
  auctionPagination(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyAuctionInput
    sort: SortFindManyAuctionInput
  ): AuctionPagination
}

"""
The string representation of JavaScript regexp. You may provide it with flags
"/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString

type RemoveByIdAuctionPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Auction

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyAuctionPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneAuctionPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Auction

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

enum SortConnectionAuctionEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
  EMAIL_DESC
  EMAIL_ASC
}

enum SortFindByIdsAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

enum SortFindManyAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

enum SortFindOneAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

enum SortRemoveOneAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

enum SortUpdateManyAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

enum SortUpdateOneAuctionInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
  CREATEDAT__UPDATEDAT__EMAIL_ASC
  CREATEDAT__UPDATEDAT__EMAIL_DESC
}

type Subscription {
  auctionMany(
    """Filter by fields"""
    filter: FilterFindManyAuctionInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyAuctionInput
  ): [Auction!]!
}

input UpdateByIdAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: UpdateByIdAuctionCurrentBidInput
  countdown: Float
  bids: [UpdateByIdAuctionCurrentBidInput]
  autobids: [UpdateByIdAuctionAutobidsInput]
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdAuctionPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Auction

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateByIdUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
}

type UpdateByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateManyAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateManyAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateManyAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: UpdateManyAuctionCurrentBidInput
  countdown: Float
  bids: [UpdateManyAuctionCurrentBidInput]
  autobids: [UpdateManyAuctionAutobidsInput]
  updatedAt: Date
  createdAt: Date
}

type UpdateManyAuctionPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateManyUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
}

type UpdateManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateOneAuctionAutobidsInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateOneAuctionCurrentBidInput {
  userid: MongoID
  value: Float
  blocked: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateOneAuctionInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
  startAmount: Float
  featured: Boolean
  enabled: Boolean
  currentBid: UpdateOneAuctionCurrentBidInput
  countdown: Float
  bids: [UpdateOneAuctionCurrentBidInput]
  autobids: [UpdateOneAuctionAutobidsInput]
  updatedAt: Date
  createdAt: Date
}

type UpdateOneAuctionPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Auction

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateOneUserInput {
  name: String
  email: String
  password: String
  admin: Boolean
  blocked: Boolean
}

type UpdateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL
  query, you will receive typed error in payload; otherwise error will be
  provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type User {
  name: String!
  email: String!
  password: String!
  admin: Boolean
  blocked: Boolean
  _id: MongoID!
}

"""A connection to a list of items."""
type UserConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge!]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type UserPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [User!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}
